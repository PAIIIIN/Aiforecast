import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import joblib
import os
import sys
import locale

# –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫—É—é –ª–æ–∫–∞–ª—å, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except locale.Error:
    # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    locale.setlocale(locale.LC_TIME, '')

# Set page configuration
st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π –≤ –ê–ª–º–∞—Ç–∏–Ω—Å–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ",
    page_icon="üåã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Application title and description
st.title("–ü—Ä–æ–≥–Ω–æ–∑ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π –≤ –ê–ª–º–∞—Ç–∏–Ω—Å–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ")
st.markdown("""
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π –¥–ª—è –ê–ª–º–∞—Ç–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
–ü—Ä–æ–≥–Ω–æ–∑—ã –≤–∫–ª—é—á–∞—é—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π –∏ –∏—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –º–∞–≥–Ω–∏—Ç—É–¥—É –ø–æ –º–µ—Å—è—Ü–∞–º.
""")

# Load models and scaler
@st.cache_resource
def load_models():
    try:
        # Adjust paths for deployment
        base_path = os.path.dirname(os.path.abspath(__file__))
        models_path = os.path.join(base_path, "models")
        
        count_model = joblib.load(os.path.join(models_path, 'earthquake_count_model.pkl'))
        mag_model = joblib.load(os.path.join(models_path, 'earthquake_magnitude_model.pkl'))
        scaler = joblib.load(os.path.join(models_path, 'feature_scaler.pkl'))
        
        # Load feature list
        with open(os.path.join(models_path, 'feature_list.txt'), 'r') as f:
            feature_cols = f.read().splitlines()
            
        return count_model, mag_model, scaler, feature_cols
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
        return None, None, None, None

# Load historical data
@st.cache_data
def load_data():
    try:
        # Adjust paths for deployment
        base_path = os.path.dirname(os.path.abspath(__file__))
        data_path = os.path.join(base_path, "data")
        models_path = os.path.join(base_path, "models")
        
        # Load processed data
        all_eq = pd.read_csv(os.path.join(data_path, 'all_almaty_region_earthquakes.csv'))
        all_eq['time'] = pd.to_datetime(all_eq['time'], format='ISO8601')
        
        # Load monthly stats
        monthly_stats = pd.read_csv(os.path.join(models_path, 'monthly_stats_prepared.csv'))
        monthly_stats['date'] = pd.to_datetime(monthly_stats['date'], format='ISO8601')
        
        # Load existing predictions if available
        try:
            future_predictions = pd.read_csv(os.path.join(models_path, 'future_predictions.csv'))
            future_predictions['date'] = pd.to_datetime(future_predictions['date'], format='ISO8601')
            
            # Add risk_level column if it doesn't exist
            if 'risk_level' not in future_predictions.columns:
                # Calculate risk level based on count and magnitude
                def calculate_risk_level(row):
                    if row['predicted_count'] == 0 or row['predicted_max_mag'] < 4.0:
                        return "–ù–∏–∑–∫–∏–π"
                    elif row['predicted_count'] < 5 and row['predicted_max_mag'] < 5.0:
                        return "–°—Ä–µ–¥–Ω–∏–π"
                    elif row['predicted_count'] < 10 and row['predicted_max_mag'] < 6.0:
                        return "–í—ã—Å–æ–∫–∏–π"
                    else:
                        return "–û—á–µ–Ω—å –í—ã—Å–æ–∫–∏–π"
                
                future_predictions['risk_level'] = future_predictions.apply(calculate_risk_level, axis=1)
                
            # Add risk_color column if it doesn't exist
            if 'risk_color' not in future_predictions.columns:
                risk_color_map = {
                    "–ù–∏–∑–∫–∏–π": "green",
                    "Moderate": "yellow",
                    "–í—ã—Å–æ–∫–∏–π": "orange",
                    "Very –í—ã—Å–æ–∫–∏–π": "red"
                }
                future_predictions['risk_color'] = future_predictions['risk_level'].map(risk_color_map)
        except:
            future_predictions = None
            
        return all_eq, monthly_stats, future_predictions
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return None, None, None

# Function to make predictions
def predict_future_months(count_model, mag_model, scaler, feature_cols, monthly_stats, months_ahead=12):
    # Get the last date in our dataset
    last_date = monthly_stats['date'].max()
    
    # Create a dataframe for future months
    future_dates = [last_date + pd.DateOffset(months=i+1) for i in range(months_ahead)]
    future_df = pd.DataFrame({'date': future_dates})
    future_df['year_month'] = future_df['date'].dt.strftime('%Y-%m')
    
    # Initialize with the last known values
    last_row = monthly_stats.iloc[-1].copy()
    
    # Make predictions for each future month
    predictions = []
    
    for i, date in enumerate(future_dates):
        # Create a new row for prediction
        new_row = pd.Series(index=feature_cols)
        
        # Add month features
        new_row['month_sin'] = np.sin(2 * np.pi * date.month/12)
        new_row['month_cos'] = np.cos(2 * np.pi * date.month/12)
        
        # For the first prediction, use the last known values
        if i == 0:
            for lag in [1, 3, 6]:
                new_row[f'count_lag_{lag}'] = monthly_stats.iloc[-lag]['monthly_count']
                new_row[f'avg_mag_lag_{lag}'] = monthly_stats.iloc[-lag]['monthly_avg_mag']
                new_row[f'max_mag_lag_{lag}'] = monthly_stats.iloc[-lag]['monthly_max_mag']
            
            # Use the last rolling statistics
            for window in [3, 6]:
                new_row[f'count_roll_{window}'] = last_row[f'count_roll_{window}']
                new_row[f'avg_mag_roll_{window}'] = last_row[f'avg_mag_roll_{window}']
                new_row[f'max_mag_roll_{window}'] = last_row[f'max_mag_roll_{window}']
        else:
            # Update lags based on previous predictions
            for lag in [1, 3, 6]:
                if i >= lag:
                    new_row[f'count_lag_{lag}'] = predictions[i-lag]['predicted_count']
                    new_row[f'avg_mag_lag_{lag}'] = predictions[i-lag]['predicted_avg_mag']
                    new_row[f'max_mag_lag_{lag}'] = predictions[i-lag]['predicted_max_mag']
                else:
                    new_row[f'count_lag_{lag}'] = monthly_stats.iloc[-(lag-i)]['monthly_count']
                    new_row[f'avg_mag_lag_{lag}'] = monthly_stats.iloc[-(lag-i)]['monthly_avg_mag']
                    new_row[f'max_mag_lag_{lag}'] = monthly_stats.iloc[-(lag-i)]['monthly_max_mag']
            
            # Update rolling statistics (simplified approach)
            for window in [3, 6]:
                if i < window:
                    # Mix of actual data and predictions
                    actual_counts = [monthly_stats.iloc[-(window-j)]['monthly_count'] for j in range(1, i+1)]
                    pred_counts = [predictions[j]['predicted_count'] for j in range(i)]
                    counts = actual_counts + pred_counts
                    new_row[f'count_roll_{window}'] = np.mean(counts)
                    
                    actual_avg_mags = [monthly_stats.iloc[-(window-j)]['monthly_avg_mag'] for j in range(1, i+1)]
                    pred_avg_mags = [predictions[j]['predicted_avg_mag'] for j in range(i)]
                    avg_mags = actual_avg_mags + pred_avg_mags
                    new_row[f'avg_mag_roll_{window}'] = np.mean(avg_mags)
                    
                    actual_max_mags = [monthly_stats.iloc[-(window-j)]['monthly_max_mag'] for j in range(1, i+1)]
                    pred_max_mags = [predictions[j]['predicted_max_mag'] for j in range(i)]
                    max_mags = actual_max_mags + pred_max_mags
                    new_row[f'max_mag_roll_{window}'] = np.mean(max_mags)
                else:
                    # All predictions
                    counts = [predictions[j]['predicted_count'] for j in range(i-window, i)]
                    new_row[f'count_roll_{window}'] = np.mean(counts)
                    
                    avg_mags = [predictions[j]['predicted_avg_mag'] for j in range(i-window, i)]
                    new_row[f'avg_mag_roll_{window}'] = np.mean(avg_mags)
                    
                    max_mags = [predictions[j]['predicted_max_mag'] for j in range(i-window, i)]
                    new_row[f'max_mag_roll_{window}'] = np.mean(max_mags)
        
        # Extract features for prediction
        features = new_row.values.reshape(1, -1)
        features_scaled = scaler.transform(features)
        
        # Make predictions
        predicted_count = max(0, round(count_model.predict(features_scaled)[0]))  # Ensure non-negative
        predicted_max_mag = mag_model.predict(features_scaled)[0]
        
        # Estimate average magnitude (simplified)
        if predicted_count > 0:
            predicted_avg_mag = predicted_max_mag * 0.8  # Simplified estimation
        else:
            predicted_avg_mag = 0
        
        # Calculate risk level based on count and magnitude
        if predicted_count == 0 or predicted_max_mag < 4.0:
            risk_level = "–ù–∏–∑–∫–∏–π"
            risk_color = "green"
        elif predicted_count < 5 and predicted_max_mag < 5.0:
            risk_level = "Moderate"
            risk_color = "yellow"
        elif predicted_count < 10 and predicted_max_mag < 6.0:
            risk_level = "–í—ã—Å–æ–∫–∏–π"
            risk_color = "orange"
        else:
            risk_level = "Very –í—ã—Å–æ–∫–∏–π"
            risk_color = "red"
        
        # Store predictions
        predictions.append({
            'date': date,
            'year_month': date.strftime('%Y-%m'),
            'predicted_count': predicted_count,
            'predicted_max_mag': predicted_max_mag,
            'predicted_avg_mag': predicted_avg_mag,
            'risk_level': risk_level,
            'risk_color': risk_color
        })
    
    # Convert to DataFrame
    future_predictions = pd.DataFrame(predictions)
    return future_predictions

# Main application
def main():
    # Load models and data
    count_model, mag_model, scaler, feature_cols = load_models()
    all_eq, monthly_stats, existing_predictions = load_data()
    
    if count_model is None or all_eq is None:
        st.error("Failed to load models or data. Please check the file paths.")
        return
    
# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")

# –û–ø—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ
    use_existing = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã", value=True if existing_predictions is not None else False)

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    months_ahead = st.sidebar.slider("–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–≤ –º–µ—Å—è—Ü–∞—Ö)", min_value=3, max_value=24, value=12)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    if use_existing and existing_predictions is not None:
        future_predictions = existing_predictions
        st.sidebar.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å {existing_predictions['date'].min().strftime('%Y-%m-%d')} –ø–æ {existing_predictions['date'].max().strftime('%Y-%m-%d')}")
    else:
        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤..."):
            future_predictions = predict_future_months(count_model, mag_model, scaler, feature_cols, monthly_stats, months_ahead)
        st.sidebar.success("–ù–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
    
    # Display information about the data
    st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π", f"{len(all_eq):,}")
    with col2:
        st.metric("–ü–µ—Ä–∏–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π", f"{all_eq['time'].min().strftime('%Y-%m-%d')} ‚Äî {all_eq['time'].max().strftime('%Y-%m-%d')}")
    with col3:
        st.metric("–†–∞–¥–∏—É—Å —Ä–µ–≥–∏–æ–Ω–∞", "500 –∫–º –≤–æ–∫—Ä—É–≥ –ê–ª–º–∞—Ç—ã")
    
    # Display forecasts
    st.header("–ü—Ä–æ–≥–Ω–æ–∑ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π")
    
    # Visualization tabs
    tab1, tab2, tab3 = st.tabs(["–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", "–î–∏–∞–≥—Ä–∞–º–º—ã –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"])
    


    with tab1:
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_df = future_predictions.copy()
        display_df['date'] = display_df['date'].dt.strftime('%B %Y')  # –ú–µ—Å—è—Ü –∏ –≥–æ–¥ –ø–æ-—Ä—É—Å—Å–∫–∏
        display_df['predicted_count'] = display_df['predicted_count'].astype(int)
        display_df['predicted_max_mag'] = display_df['predicted_max_mag'].round(1)
        
        # Create a styled dataframe
    st.dataframe(
    display_df[['date', 'predicted_count', 'predicted_max_mag', 'risk_level']].rename(
        columns={
            'date': '–ú–µ—Å—è—Ü',
            'predicted_count': '–ü—Ä–æ–≥–Ω–æ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π',
            'predicted_max_mag': '–ü—Ä–æ–≥–Ω–æ–∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –º–∞–≥–Ω–∏—Ç—É–¥—ã',
            'risk_level': '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞'
        }
    ),
    use_container_width=True,
    hide_index=True
)
    
    with tab2:
    # –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é Plotly
        fig1 = px.line(
        monthly_stats, x='date', y='monthly_count',
        labels={'date': '–î–∞—Ç–∞', 'monthly_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π'},
        title='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π'
    )
        
        # Add predictions to the chart
        fig1.add_scatter(
        x=future_predictions['date'],
        y=future_predictions['predicted_count'],
        mode='lines+markers',
        name='–ü—Ä–æ–≥–Ω–æ–∑',
        line=dict(dash='dash', color='red')
        )
        
        st.plotly_chart(fig1, use_container_width=True)
        
        # Magnitude chart
        fig2 = px.line(
            monthly_stats, x='date', y='monthly_max_mag',
            labels={'date': 'Date', 'monthly_max_mag': 'Maximum Magnitude'},
            title='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –º–∞–≥–Ω–∏—Ç—É–¥—ã'
        )
        
        # Add predictions to the chart
        fig2.add_scatter(
            x=future_predictions['date'],
            y=future_predictions['predicted_max_mag'],
            mode='lines+markers',
            name='–ü—Ä–æ–≥–Ω–æ–∑',
            line=dict(dash='dash', color='red')
        )
        
        st.plotly_chart(fig2, use_container_width=True)
        
        # Risk level chart
        risk_colors = {
            '–ù–∏–∑–∫–∏–π': 'green',
            '–°—Ä–µ–¥–Ω–∏–π': 'yellow',
            '–í—ã—Å–æ–∫–∏–π': 'orange',
            '–û—á–µ–Ω—å –í—ã—Å–æ–∫–∏–π': 'red'
        }
        
        fig3 = go.Figure()
        
        for risk in risk_colors:
            risk_data = future_predictions[future_predictions['risk_level'] == risk]
            if not risk_data.empty:
                fig3.add_trace(go.Bar(
                    x=risk_data['date'],
                    y=[1] * len(risk_data),
                    name=risk,
                    marker_color=risk_colors[risk],
                    hovertemplate='%{x}<br>Risk: ' + risk
                ))
        
        fig3.update_layout(
            title='–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π',
            xaxis_title='Month',
            yaxis_title='Risk Level',
            barmode='stack',
            showlegend=True
        )
        
        st.plotly_chart(fig3, use_container_width=True)
    
    with tab3:
        # Display historical earthquake data
        st.subheader("Historical Earthquake Data")
        
        # Map of historical earthquakes
        st.subheader("Spatial Distribution of Earthquakes")
        fig = px.scatter_mapbox(
            all_eq, 
            lat="latitude", 
            lon="longitude", 
            color="mag",
            size="mag",
            color_continuous_scale="Viridis",
            size_max=15,
            zoom=5,
            center={"lat": 43.10, "lon": 76.87},
            hover_name="place",
            hover_data=["time", "depth", "mag"],
            title="Earthquakes near Almaty (1970-2024)",
            mapbox_style="open-street-map"
        )
        
        # Add Almaty marker
        fig.add_trace(
            go.Scattermapbox(
                lat=[43.10],
                lon=[76.87],
                mode='markers',
                marker=dict(size=12, color='red'),
                name='Almaty'
            )
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Magnitude distribution
        fig = px.histogram(
            all_eq, 
            x="mag", 
            nbins=20,
            title="Magnitude Distribution",
            labels={"mag": "Magnitude", "count": "Number of Earthquakes"}
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Depth distribution
        fig = px.histogram(
            all_eq, 
            x="depth", 
            nbins=30,
            title="Depth Distribution",
            labels={"depth": "Depth (km)", "count": "Number of Earthquakes"}
        )
        st.plotly_chart(fig, use_container_width=True)
    
# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
    st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
    st.markdown("""
### –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è

–ú–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π, —Ç–∞–∫ –∏ –∏—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –º–∞–≥–Ω–∏—Ç—É–¥—ã –Ω–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –æ—Å–Ω–æ–≤–µ. –ú–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è—Ö –≤ —Ä–∞–¥–∏—É—Å–µ 500 –∫–º –æ—Ç –ê–ª–º–∞—Ç—ã.

**–ü—Ä–∏–∑–Ω–∞–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –º–æ–¥–µ–ª—è—Ö:**
- –û—Ç—Å—Ç–∞—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –º–∞–≥–Ω–∏—Ç—É–¥ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Å—è—Ü—ã
- –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ —Å–µ–π—Å–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–º–µ—Å—è—Ü –≥–æ–¥–∞)

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
- –ú–æ–¥–µ–ª—å –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—è—Ö –∏ –º–æ–∂–µ—Ç –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
- –ü—Ä–æ–≥–Ω–æ–∑—ã –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ; –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
- –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º, –∞ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞:**
- **–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫**: –û–±—ã—á–Ω—ã–µ –º–µ—Ä—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
- **–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫**: –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–ª–∞–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π –∏ –∞–≤–∞—Ä–∏–π–Ω—ã–µ –∑–∞–ø–∞—Å—ã
- **–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫**: –ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–≤—è–∑–∏
- **–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫**: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–µ—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø–æ–≤—ã—à–µ–Ω–Ω—É—é –Ω–∞—Å—Ç–æ—Ä–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
""")
    
    # Footer
    st.markdown("---")
    st.markdown("–ü—Ä–æ–µ–∫—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π –¥–ª—è –ê–ª–º–∞—Ç–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ | –°–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è—Ö —Å 1970 –ø–æ 2024 –≥–æ–¥")

if __name__ == "__main__":
    main()
